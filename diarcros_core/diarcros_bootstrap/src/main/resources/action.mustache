package edu.tufts.hrilab.diarcros.{{javapackage}};

import java.net.URI;
import java.net.URISyntaxException;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import org.ros.actionlib.ActionSpec;
import org.ros.actionlib.client.SimpleActionClient;
import org.ros.actionlib.state.SimpleClientGoalState;
import org.ros.address.InetAddressFactory;
import org.ros.exception.RosException;
import org.ros.message.MessageListener;
import org.ros.namespace.GraphName;
import org.ros.node.AbstractNodeMain;
import org.ros.node.ConnectedNode;
import org.ros.node.DefaultNodeMainExecutor;
import org.ros.node.NodeConfiguration;
import org.ros.node.NodeMain;
import org.ros.node.NodeMainExecutor;
import org.ros.node.service.ServiceClient;
import org.ros.node.service.ServiceResponseListener;
import org.ros.node.topic.Publisher;
import org.ros.node.topic.Subscriber;

public class {{javanodename}} {
    // ROS connection
    private ConnectedNode node;
    private NodeMain nodeMain;
    private NodeMainExecutor nodeMainExecutor;

    // ROS node ready/wait
    private volatile boolean nodeReady = false;
    private final Lock nodeReadyLock = new ReentrantLock();
    private final Condition nodeReadyCond = nodeReadyLock.newCondition();

    // Subscription local data & locks
    {{#subscriptions}}
    private edu.tufts.hrilab.diarcros.msg.{{type}} {{name}};
    private final Object {{name}}Lock = new Object();
    {{/subscriptions}}

    // Publishers
    {{#publications}}
    private Publisher<{{type}}> {{name}}Publisher;
    {{/publications}}

    // Services
    {{#services}}
    ServiceClient<{{type}}Request, {{type}}Response> {{name}};
    {{type}}Response {{name}}Response;
    final Object {{name}}Lock = new Object();
    boolean {{name}}Condition = false;
    boolean {{name}}Success = false;
    {{/services}}

    // Action clients
    /*
    {{#actions}}
      {{name}}
      {{client-name}}
      {{class}}
      {{action}}
    {{/actions}}
    */

    {{#actions}}
    private SimpleActionClient<
            {{#action-feedback}}{{type}}{{/action-feedback}},
            {{#action-goal}}{{type}}{{/action-goal}},
            {{#action-result}}{{type}}{{/action-result}},
            {{#feedback}}{{type}}{{/feedback}},
            {{#goal}}{{type}}{{/goal}},
            {{#result}}{{type}}{{/result}}> {{name}}Client;
    {{/actions}}    

    public {{javanodename}}() {
        nodeMain = new AbstractNodeMain() {
            @Override
            public GraphName getDefaultNodeName() {
                return GraphName.of("diarc{{nodename}}");
            }
                
            @Override
            public void onStart(ConnectedNode connectedNode) {
                node = connectedNode;
                // Subscribers
                {{#subscriptions}}
                Subscriber<{{type}}> {{name}}Sub = node.newSubscriber("{{topic}}", {{type}}._TYPE);
                {{name}}Sub.addMessageListener(new MessageListener<{{type}}>() {
                    @Override
                    public void onNewMessage({{type}} msg) {
                        synchronized ({{name}}Lock) {
                            {{name}} = edu.tufts.hrilab.diarcros.msg.{{type}}.toAde(msg);
                        }
                    }
                });
                {{/subscriptions}}

                // Publishers
                {{#publications}}
                {{name}}Publisher = node.newPublisher("{{topic}}", {{type}}._TYPE);
                {{/publications}}

                //Services
                {{#services}}
                try {
                    {{name}} = node.newServiceClient("{{rosname}}", {{type}}._TYPE);
                } catch (org.ros.exception.ServiceNotFoundException e) {
                    System.err.println("Could not find service! Exception: " + e);
                }
                {{/services}}

                // Action Client
		{{#actions}}
                try {
                    {{name}}Client = new SimpleActionClient<>("{{nodename}}",
                            new ActionSpec({{class}},
                            "{{#action}}{{topic}}{{/action}}",
                            "{{#action-feedback}}{{topic}}{{/action-feedback}}",
							"{{#action-goal}}{{topic}}{{/action-goal}}",
							"{{#action-result}}{{topic}}{{/action-result}}",
							"{{#feedback}}{{topic}}{{/feedback}}",
							"{{#goal}}{{topic}}{{/goal}}",
							"{{#result}}{{topic}}{{/result}}"));
                                                    
                    
                } catch (RosException e) {
                    e.printStackTrace();
                }
                while ({{name}}Client == null)
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException e) {
                       e.printStackTrace();
                }
                {{name}}Client.addClientPubSub(node);
		{{/actions}}

                // notify of node ready
                nodeReadyLock.lock();
                nodeReady = true;
                try {
                  nodeReadyCond.signalAll();
                } finally {
                  nodeReadyLock.unlock();
                }
            }
        };
        
        try {
          URI ros_master_uri = new URI(System.getenv("ROS_MASTER_URI"));
          String host = InetAddressFactory.newNonLoopback().getHostAddress();
          NodeConfiguration nodeConfiguration = NodeConfiguration.newPublic(host, ros_master_uri);
          nodeMainExecutor = DefaultNodeMainExecutor.newDefault();
          nodeMainExecutor.execute(nodeMain, nodeConfiguration);
        } catch (URISyntaxException e) {
          System.err.println("Error trying to create URI: " + e);
        }
    }

    // wait for node to be ready
    public void waitForNode() {
      nodeReadyLock.lock();
      try {
        while (!nodeReady) {
          nodeReadyCond.awaitUninterruptibly();
        }
      } finally {
        nodeReadyLock.unlock();
      }
    }
    
    public edu.tufts.hrilab.diarcros_core.diarcros_bootstrap.src.main.java.edu.tufts.hrilab.diarcros.msg.diarcros.Time getCurrentTime() {
      return edu.tufts.hrilab.diarcros_core.diarcros_bootstrap.src.main.java.edu.tufts.hrilab.diarcros.msg.diarcros.Time.toAde(node.getCurrentTime());
    }

    // Subscribers
    {{#subscriptions}}
    public synchronized edu.tufts.hrilab.diarcros.msg.{{type}} get{{name}}() {
        return {{name}};
    }
    {{/subscriptions}}

    // Publishers
    {{#publications}}
    public void send{{name}}(edu.tufts.hrilab.diarcros.msg.{{type}} msg) {
        {{name}}Publisher.publish(edu.tufts.hrilab.diarcros.msg.{{type}}.toRos(msg, node));
    }
    {{/publications}}

    // Services
    {{#services}}
    public boolean call{{name}}(edu.tufts.hrilab.diarcros.msg.{{type}}Request request, edu.tufts.hrilab.diarcros.msg.{{type}}Response response) {
        {{name}}Condition = false;
        {{name}}Success = false;
        {{name}}.call(edu.tufts.hrilab.diarcros.msg.{{type}}Request.toRos(request, node),
                new ServiceResponseListener<{{type}}Response>() {

            @Override
            public void onSuccess({{type}}Response mt) {
                {{name}}Response = mt;
                synchronized({{name}}Lock) {
                    {{name}}Condition = true;
                    {{name}}Success = true;
                    {{name}}Lock.notify();
                }
            }

            @Override
            public void onFailure(org.ros.exception.RemoteException re) {
                synchronized({{name}}Lock) {
                    {{name}}Condition = true;
                    {{name}}Success = false;
                    {{name}}Lock.notify();
                }
            }
        });
        
        synchronized({{name}}Lock) {
            while(!{{name}}Condition) {
                try {
                    {{name}}Lock.wait();
                } catch (InterruptedException e) {
                }
            }
        }
        if ({{name}}Success) {
            edu.tufts.hrilab.diarcros.msg.{{type}}Response.toAde({{name}}Response, response);
        }
        return {{name}}Success;
    }
    {{/services}}
        
    // Action(s) Methods
    {{#actions}}
    public void cancelAll{{name}}Goals() {
        {{name}}Client.cancelAllGoals();
    }
        
    public void cancel{{name}}Goal() throws RosException {
        {{name}}Client.cancelGoal();
    }

    public void cancel{{name}}GoalsAtAndBeforeTime(edu.tufts.hrilab.diarcros_core.diarcros_bootstrap.src.main.java.edu.tufts.hrilab.diarcros.msg.diarcros.Time time) {
        {{name}}Client.cancelGoalsAtAndBeforeTime(edu.tufts.hrilab.diarcros_core.diarcros_bootstrap.src.main.java.edu.tufts.hrilab.diarcros.msg.diarcros.Time.toRos(time, node));
    }

    public {{#result}}{{type}}{{/result}} get{{name}}Result() throws RosException {
        return {{name}}Client.getResult();
    }

    public SimpleClientGoalState get{{name}}State() {
        return {{name}}Client.getState();
    }

    public void send{{name}}Goal(edu.tufts.hrilab.diarcros.msg.{{#goal}}{{type}}{{/goal}} goal) throws RosException {
         {{name}}Client.sendGoal(edu.tufts.hrilab.diarcros.msg.{{#goal}}{{type}}{{/goal}}.toRos(goal, node));
    }

    public void waitFor{{name}}Result() throws InterruptedException {
        {{name}}Client.waitForResult();
    }

    public boolean waitFor{{name}}Result(long timeout, java.util.concurrent.TimeUnit units) throws InterruptedException {
        return {{name}}Client.waitForResult(timeout, units);
    }

    public void waitFor{{name}}Server() throws InterruptedException {
        {{name}}Client.waitForServer();
    }

    public boolean waitFor{{name}}Server(long timeout, java.util.concurrent.TimeUnit units) throws InterruptedException {
        return {{name}}Client.waitForServer(timeout, units);
    }
    {{/actions}}
}

